<?php
/**
 * MetadataApi
 * PHP version 5
 *
 * @category Class
 * @package  Okaufmann\WeatherApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Temperature
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Okaufmann\WeatherApiClient\Api;

use \Okaufmann\WeatherApiClient\ApiClient;
use \Okaufmann\WeatherApiClient\ApiException;
use \Okaufmann\WeatherApiClient\Configuration;
use \Okaufmann\WeatherApiClient\ObjectSerializer;

/**
 * MetadataApi Class Doc Comment
 *
 * @category Class
 * @package  Okaufmann\WeatherApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetadataApi
{
    /**
     * API Client
     *
     * @var \Okaufmann\WeatherApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Okaufmann\WeatherApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Okaufmann\WeatherApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Okaufmann\WeatherApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Okaufmann\WeatherApiClient\ApiClient $apiClient set the API client
     *
     * @return MetadataApi
     */
    public function setApiClient(\Okaufmann\WeatherApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation metadataLocationIdGet
     *
     * @param int $location_id Location ID (e.g. 300005 for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function metadataLocationIdGet($location_id)
    {
        list($response) = $this->metadataLocationIdGetWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation metadataLocationIdGetWithHttpInfo
     *
     * @param int $location_id Location ID (e.g. 300005 for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataLocationIdGetWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling metadataLocationIdGet');
        }
        // parse inputs
        $resourcePath = "/metadata/{location_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/metadata/{location_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation metadataSearchQueryTextGet
     *
     * @param string $query_text Text or number to search a location for (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function metadataSearchQueryTextGet($query_text)
    {
        list($response) = $this->metadataSearchQueryTextGetWithHttpInfo($query_text);
        return $response;
    }

    /**
     * Operation metadataSearchQueryTextGetWithHttpInfo
     *
     * @param string $query_text Text or number to search a location for (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataSearchQueryTextGetWithHttpInfo($query_text)
    {
        // verify the required parameter 'query_text' is set
        if ($query_text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query_text when calling metadataSearchQueryTextGet');
        }
        // parse inputs
        $resourcePath = "/metadata/search/{query_text}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($query_text !== null) {
            $resourcePath = str_replace(
                "{" . "query_text" . "}",
                $this->apiClient->getSerializer()->toPathValue($query_text),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/metadata/search/{query_text}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
