<?php
/**
 * MeasuredvaluesApi
 * PHP version 5
 *
 * @category Class
 * @package  Okaufmann\WeatherApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Temperature
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Okaufmann\WeatherApiClient\Api;

use \Okaufmann\WeatherApiClient\ApiClient;
use \Okaufmann\WeatherApiClient\ApiException;
use \Okaufmann\WeatherApiClient\Configuration;
use \Okaufmann\WeatherApiClient\ObjectSerializer;

/**
 * MeasuredvaluesApi Class Doc Comment
 *
 * @category Class
 * @package  Okaufmann\WeatherApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeasuredvaluesApi
{
    /**
     * API Client
     *
     * @var \Okaufmann\WeatherApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Okaufmann\WeatherApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Okaufmann\WeatherApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Okaufmann\WeatherApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Okaufmann\WeatherApiClient\ApiClient $apiClient set the API client
     *
     * @return MeasuredvaluesApi
     */
    public function setApiClient(\Okaufmann\WeatherApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation stationsGet
     *
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsGet()
    {
        list($response) = $this->stationsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation stationsGetWithHttpInfo
     *
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/stations/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stationsStationIdGet
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsStationIdGet($station_id)
    {
        list($response) = $this->stationsStationIdGetWithHttpInfo($station_id);
        return $response;
    }

    /**
     * Operation stationsStationIdGetWithHttpInfo
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsStationIdGetWithHttpInfo($station_id)
    {
        // verify the required parameter 'station_id' is set
        if ($station_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $station_id when calling stationsStationIdGet');
        }
        // parse inputs
        $resourcePath = "/stations/{station_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($station_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/{station_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stationsStationIdRainfallGet
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsStationIdRainfallGet($station_id)
    {
        list($response) = $this->stationsStationIdRainfallGetWithHttpInfo($station_id);
        return $response;
    }

    /**
     * Operation stationsStationIdRainfallGetWithHttpInfo
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsStationIdRainfallGetWithHttpInfo($station_id)
    {
        // verify the required parameter 'station_id' is set
        if ($station_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $station_id when calling stationsStationIdRainfallGet');
        }
        // parse inputs
        $resourcePath = "/stations/{station_id}/rainfall";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($station_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/{station_id}/rainfall'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stationsStationIdSunshineGet
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsStationIdSunshineGet($station_id)
    {
        list($response) = $this->stationsStationIdSunshineGetWithHttpInfo($station_id);
        return $response;
    }

    /**
     * Operation stationsStationIdSunshineGetWithHttpInfo
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsStationIdSunshineGetWithHttpInfo($station_id)
    {
        // verify the required parameter 'station_id' is set
        if ($station_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $station_id when calling stationsStationIdSunshineGet');
        }
        // parse inputs
        $resourcePath = "/stations/{station_id}/sunshine";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($station_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/{station_id}/sunshine'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stationsStationIdTemperatureGet
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsStationIdTemperatureGet($station_id)
    {
        list($response) = $this->stationsStationIdTemperatureGetWithHttpInfo($station_id);
        return $response;
    }

    /**
     * Operation stationsStationIdTemperatureGetWithHttpInfo
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsStationIdTemperatureGetWithHttpInfo($station_id)
    {
        // verify the required parameter 'station_id' is set
        if ($station_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $station_id when calling stationsStationIdTemperatureGet');
        }
        // parse inputs
        $resourcePath = "/stations/{station_id}/temperature";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($station_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/{station_id}/temperature'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stationsStationIdValuesGet
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return string
     */
    public function stationsStationIdValuesGet($station_id)
    {
        list($response) = $this->stationsStationIdValuesGetWithHttpInfo($station_id);
        return $response;
    }

    /**
     * Operation stationsStationIdValuesGetWithHttpInfo
     *
     * @param string $station_id ID of station from which the data should be returned (e.g. BER for Bern) (required)
     * @throws \Okaufmann\WeatherApiClient\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationsStationIdValuesGetWithHttpInfo($station_id)
    {
        // verify the required parameter 'station_id' is set
        if ($station_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $station_id when calling stationsStationIdValuesGet');
        }
        // parse inputs
        $resourcePath = "/stations/{station_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($station_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/stations/{station_id}/values'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
